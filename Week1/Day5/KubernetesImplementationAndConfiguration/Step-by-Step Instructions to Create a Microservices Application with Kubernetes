What is Kubernetes? 
Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. 
It provides a framework to run distributed systems resiliently and efficiently, allowing for load balancing, service discovery, rolling updates, and more. 
Kubernetes is widely used to manage microservices architectures due to its scalability and flexibility.

Step-by-Step Instructions to Create a Microservices Application with Kubernetes

1. Set Up the Environment

    Install Docker:
    Docker enables you to build and run containers. Depending on your OS, please follow the installation guide from Docker's official documentation.
    
    Install Kubernetes:
    You can run Kubernetes locally using tools like Minikube or Kind. Below is the installation process for Minikube.
    
    Install Minikube:
    
    # On macOS:  
    brew install minikube  
    
    # On Windows (using Chocolatey):  
    choco install minikube 

    If you are not installed the Chocolatey in windows please follow the below steps:
        To install it on locally use the Windows Powershell and run as adminisartor then execute the following script :
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        To verify the insatllation :
        Type choco in cmd and if you see the version info then the intalation is completed sucessfully.

    # On Linux via apt:  
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64  
    sudo install minikube-linux-amd64 /usr/local/bin/minikube  
    
    Start Minikube:
    minikube start 
  
    Install kubectl:
    kubectl is the command-line interface to interact with Kubernetes.
    
    Install using package manager:
    
    # macOS  
    brew install kubectl  
    
    # Windows  
    choco install kubernetes-cli  
    
    # Linux (Debian/Ubuntu)  
    sudo apt-get install -y kubectl  
  
    Verify installation:
    kubectl version --client

2. Create Microservices

Create User Service
    Create a new ASP.NET Core Web API project:
    
    dotnet new webapi -n UserService  
    cd UserService  

    Add the Controllers folder and create the UsersController and replace the content with the following code:
    
    using Microsoft.AspNetCore.Mvc;  
    namespace UserService.Controllers  
    {  
        [ApiController]  
        [Route("[controller]")]  
        public class UsersController : ControllerBase  
        {  
            [HttpGet]  
            public IActionResult GetUsers()  
            {  
                var users = new[]  
                {  
                    new { Id = 1, Name = "Suri" },  
                    new { Id = 2, Name = "Mouni" }  
                };  
                return Ok(users);  
            }  
        }  
    }  

    Add the lines of code in Program.cs file :

            builder.Services.AddControllers();      
            app.MapControllers();

    Remove unnecessary files: Since we're creating a simple service, you can delete WeatherForecast.cs and the WeatherForecast class.
    
    Update launchSettings.json (optional): To set the port from which the service will run locally, locate Properties/launchSettings.json and set:
    
    "profiles": {  
        "UserService": {  
            "commandName": "Project",  
            "launchBrowser": true,  
            "applicationUrl": "http://localhost:5000",  
            "environmentVariables": {  
                "ASPNETCORE_ENVIRONMENT": "Development"  
            }  
        },  
        ...  
    }  

Create Product Service

      Create a new ASP.NET Core Web API project:
      
      dotnet new webapi -n ProductService  
      cd ProductService  
      
      Add the Controllers folder and create the ProductsController and replace the content with the following code:
      
  
      using Microsoft.AspNetCore.Mvc;  
      namespace ProductService.Controllers  
      {  
          [ApiController]  
          [Route("[controller]")]  
          public class ProductsController : ControllerBase  
          {  
              [HttpGet]  
              public IActionResult GetProducts()  
              {  
                  var products = new[]  
                  {  
                      new { Id = 1, Name = "Dell Laptop" },  
                      new { Id = 2, Name = "Oneplus SmartPhone" }  
                  };  
                  return Ok(products);  
              }  
          }  
      }  
    
        Add the lines of code in Program.cs file :

            builder.Services.AddControllers();      
            app.MapControllers();

    Remove unnecessary files: Since we're creating a simple service, you can delete WeatherForecast.cs and the WeatherForecast class.
    
    Update launchSettings.json (optional): To set the port from which the service will run locally, locate Properties/launchSettings.json and set:
    
    "profiles": {  
        "ProductService": {  
            "commandName": "Project",  
            "launchBrowser": true,  
            "applicationUrl": "http://localhost:5000",  
            "environmentVariables": {  
                "ASPNETCORE_ENVIRONMENT": "Development"  
            }  
        },  
        ...  
    }  



Step 2: Containerize the Microservices

    Create Dockerfiles
    
    User Service Dockerfile:
    Create a file named Dockerfile in the UserService directory:

        # Use the official ASP.NET Core Runtime as the base image  
        FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base  
        WORKDIR /app  
        EXPOSE 80  
          
        # Use the SDK image to build the application  
        FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build  
        WORKDIR /src  
        COPY ["UserService.csproj", "./"]  
        RUN dotnet restore "UserService.csproj"  
        COPY . .  
        WORKDIR "/src"  
        RUN dotnet build "UserService.csproj" -c Release -o /app/build  
          
        # Publish the application  
        FROM build AS publish  
        RUN dotnet publish "UserService.csproj" -c Release -o /app/publish  
          
        # Final stage to build the runtime  
        FROM base AS final  
        WORKDIR /app  
        COPY --from=publish /app/publish .  
        ENTRYPOINT ["dotnet", "UserService.dll"]  


    Product Service Dockerfile:
    
    Create a file named Dockerfile in the ProductService directory:

        # Use the official ASP.NET Core Runtime as the base image  
        FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base  
        WORKDIR /app  
        EXPOSE 80  
          
        # Use the SDK image to build the application  
        FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build  
        WORKDIR /src  
        COPY ["ProductService.csproj", "./"]  
        RUN dotnet restore "ProductService.csproj"  
        COPY . .  
        WORKDIR "/src"  
        RUN dotnet build "ProductService.csproj" -c Release -o /app/build  
          
        # Publish the application  
        FROM build AS publish  
        RUN dotnet publish "ProductService.csproj" -c Release -o /app/publish  
          
        # Final stage to build the runtime  
        FROM base AS final  
        WORKDIR /app  
        COPY --from=publish /app/publish .  
        ENTRYPOINT ["dotnet", "ProductService.dll"]  



    Build Docker Images
    From the root directory that contains both UserService and ProductService, run:

        Build User Service Docker Image :

        Open the UserService project root folder and execute the below command :
        docker build -t yourusername/userservice:1.0 .  ==> Replace with your docker name  
        
        Build Product Service Docker Image :

        Open the ProductService project root folder and execute the below command :

        docker build -t yourusername/productservice:1.0 .  ==> Replace with your docker name 

Step 3: Push Images to Container Registry
        
        Push the images to Docker Hub or your preferred container registry:
        
        # Login to Docker Hub  
        docker login  
        
        # Push images  
        docker push yourusername/userservice:1.0  
        docker push yourusername/productservice:1.0  

Step 4: Create Kubernetes Deployments and Services

    Once you've built and pushed your Docker images (UserService and ProductService), the next step is to deploy these services on a Kubernetes cluster. 
    You will need to create Kubernetes Deployment and Service YAML configuration files for each of the services.
    
    Below is a guide on how to create and apply these configurations for both services.
   
    1. Create Deployment and Service YAML Files
    For UserService:
    Create a file named userservice-deployment.yaml with the following content: (Place this file in the root folder of UserService application)

            apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: userservice-deployment
        spec:
          replicas: 2  # Number of pods to run
          selector:
            matchLabels:
              app: userservice
          template:
            metadata:
              labels:
                app: userservice
            spec:
              containers:
              - name: userservice
                image: yourusername/userservice:1.0  # Replace with your actual Docker Hub username
                ports:
                - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: userservice
        spec:
          type: LoadBalancer  # Use ClusterIP for internal-only access
          ports:
          - port: 80
            targetPort: 80
          selector:
            app: userservice


    For ProductService:
    Create a file named productservice-deployment.yaml with the following content:

            apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: productservice-deployment
        spec:
          replicas: 2  # Number of pods to run
          selector:
            matchLabels:
              app: productservice
          template:
            metadata:
              labels:
                app: productservice
            spec:
              containers:
              - name: productservice
                image: yourusername/productservice:1.0  # Replace with your actual Docker Hub username
                ports:
                - containerPort: 80
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: productservice
        spec:
          type: LoadBalancer  # Use ClusterIP for internal-only access
          ports:
          - port: 80
            targetPort: 80
          selector:
            app: productservice

Step 5: Deploy to Kubernetes

    Apply the Kubernetes Configurations
    Once you have created the YAML files, you can deploy the services to your Kubernetes cluster using the following commands:

    Deploy UserService:
    kubectl apply -f userservice-deployment.yaml

    Deploy ProductService:
    kubectl apply -f productservice-deployment.yaml

    Verify the Deployments and Services:

    Check the status of the Deployments:
    kubectl get deployments

    Check the status of the Services:
    kubectl get services
    
    If you're using a cloud provider or a local setup with Kubernetes LoadBalancer (e.g., Minikube), you should see an external IP for both services. 
    If you're using ClusterIP for internal access, you can use port forwarding for testing.


Step 6: Access the Microservices
To expose your services externally, change the service type to NodePort or use kubectl port-forward.
      
      To expose the services as NodePort
      kubectl expose deployment user-service --type=NodePort --port=80  
      kubectl expose deployment product-service --type=NodePort --port=80  

Get the external ports:

kubectl get services

Example output:

NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE  
user-service    NodePort    10.96.0.1      <none>       80:<NodePort1>/TCP   1m  
product-service NodePort    10.96.0.2      <none>       80:<NodePort2>/TCP   1m  


Access the services through your localhost with the NodePort.

      http://<minikube-ip>:<NodePort1>/users   
      http://<minikube-ip>:<NodePort2>/products  

Step 7: Monitor and Manage Your Services

List your deployments and pods to check the status:

      kubectl get deployments  
      kubectl get pods  

If you need to log the output from your services, use:

      kubectl logs <pod-name>  # Replace <pod-name> with the name of your pod  

Best Practices for ASP.NET Microservices in Kubernetes

Use Environment Variables: Store configurations and secrets using environment variables or Kubernetes Secrets.

Use Namespaces: For organization and isolation, use Kubernetes namespaces for different environments (dev, staging, production).

Manage Configurations: Use ConfigMaps and Secrets to manage configuration data and sensitive information separately.
        Example ConfigMap:
        
        apiVersion: v1  
        kind: ConfigMap  
        metadata:  
          name: user-config  
        data:  
          APP_ENV: "production"  

Resource Management: Define resource requests and limits for CPU and memory in your YAML files:
        resources:  
          requests:  
            memory: "64Mi"  
            cpu: "250m"  
          limits:  
            memory: "128Mi"  
            cpu: "500m"  

Health Checks: Define readiness and liveness probes to ensure your services are healthy.

      readinessProbe:  
        httpGet:  
          path: /health  
          port: 80  
        initialDelaySeconds: 5  
        periodSeconds: 10  

Centralized Logging: Utilize centralized logging and monitoring solutions like ELK (Elasticsearch, Logstash, Kibana) or Application Insights.

Service Discovery: Use Kubernetes built-in service discovery to allow services to find each other effectively.

Rate Limiting: Implement rate limiting on your APIs to control traffic and prevent abuse.

Use API Gateway: Consider deploying an API gateway like Istio or NGINX to manage all your microservices efficiently.

Microservices Communication: Choose appropriate communication style between microservices, whether HTTP REST or gRPC depending on performance and scalability needs.

Use Helm Charts: Helm can simplify the deployment and management of Kubernetes applications by allowing you to package your resources.

Service Communication: Consider using service meshes (like Istio or Linkerd) to handle service-to-service communication and provide features like traffic management and security.

Use Labels and Annotations: Leverage Kubernetes labels for organizing and selecting resources easily.

Conclusion

By following these steps, you can successfully build, deploy, and manage ASP.NET Core microservices in a Kubernetes environment. 
This setup promotes better organization, scalability, and maintainability as your application grows. 
Adopting best practices will further enhance the performance and reliability of your microservices architecture.
